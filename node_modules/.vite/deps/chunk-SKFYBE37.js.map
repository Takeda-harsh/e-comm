{
  "version": 3,
  "sources": ["../../react-hook-form/src/utils/isCheckBoxInput.ts", "../../react-hook-form/src/utils/isNullOrUndefined.ts", "../../react-hook-form/src/utils/isObject.ts", "../../react-hook-form/src/logic/getControllerValue.ts", "../../react-hook-form/src/logic/getNodeParentName.ts", "../../react-hook-form/src/logic/isNameInFieldArray.ts", "../../react-hook-form/src/utils/compact.ts", "../../react-hook-form/src/utils/isUndefined.ts", "../../react-hook-form/src/utils/get.ts", "../../react-hook-form/src/constants.ts", "../../react-hook-form/src/utils/omit.ts", "../../react-hook-form/src/useFormContext.tsx", "../../react-hook-form/src/logic/getProxyFormState.ts", "../../react-hook-form/src/utils/isEmptyObject.ts", "../../react-hook-form/src/logic/shouldRenderFormState.ts", "../../react-hook-form/src/utils/convertToArrayPayload.ts", "../../react-hook-form/src/utils/isWeb.ts", "../../react-hook-form/src/utils/isProxyEnabled.ts", "../../react-hook-form/src/useFormState.ts", "../../react-hook-form/src/useController.ts", "../../react-hook-form/src/controller.tsx", "../../react-hook-form/src/logic/appendErrors.ts", "../../react-hook-form/src/utils/isKey.ts", "../../react-hook-form/src/utils/stringToPath.ts", "../../react-hook-form/src/utils/set.ts", "../../react-hook-form/src/logic/focusFieldBy.ts", "../../react-hook-form/src/logic/getFieldsValues.ts", "../../react-hook-form/src/logic/generateId.ts", "../../react-hook-form/src/logic/mapId.ts", "../../react-hook-form/src/utils/isPrimitive.ts", "../../react-hook-form/src/utils/deepEqual.ts", "../../react-hook-form/src/utils/deepMerge.ts", "../../react-hook-form/src/logic/setFieldArrayDirtyFields.ts", "../../react-hook-form/src/utils/append.ts", "../../react-hook-form/src/utils/fillEmptyArray.ts", "../../react-hook-form/src/utils/insert.ts", "../../react-hook-form/src/utils/isString.ts", "../../react-hook-form/src/utils/move.ts", "../../react-hook-form/src/utils/prepend.ts", "../../react-hook-form/src/utils/remove.ts", "../../react-hook-form/src/utils/swap.ts", "../../react-hook-form/src/utils/isBoolean.ts", "../../react-hook-form/src/utils/unset.ts", "../../react-hook-form/src/useFieldArray.ts", "../../react-hook-form/src/logic/getFields.ts", "../../react-hook-form/src/utils/isFileInput.ts", "../../react-hook-form/src/utils/isMultipleSelect.ts", "../../react-hook-form/src/utils/isRadioInput.ts", "../../react-hook-form/src/logic/getCheckboxValue.ts", "../../react-hook-form/src/logic/getFieldValueAs.ts", "../../react-hook-form/src/logic/getMultipleSelectValue.ts", "../../react-hook-form/src/logic/getRadioValue.ts", "../../react-hook-form/src/logic/getFieldValue.ts", "../../react-hook-form/src/logic/hasValidation.ts", "../../react-hook-form/src/logic/skipValidation.ts", "../../react-hook-form/src/utils/isFunction.ts", "../../react-hook-form/src/utils/isMessage.ts", "../../react-hook-form/src/utils/isRegex.ts", "../../react-hook-form/src/logic/getValidateError.ts", "../../react-hook-form/src/logic/getValueAndMessage.ts", "../../react-hook-form/src/logic/validateField.ts", "../../react-hook-form/src/utils/getValidationModes.ts", "../../react-hook-form/src/utils/isHTMLElement.ts", "../../react-hook-form/src/utils/isRadioOrCheckbox.ts", "../../react-hook-form/src/utils/Subject.ts", "../../react-hook-form/src/useForm.ts", "../../react-hook-form/src/useWatch.ts"],
  "sourcesContent": ["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n", "export default (value: unknown): value is null | undefined => value == null;\n", "import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n", "import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n", "export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n", "import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n", "export default (value: any[]) => value.filter(Boolean);\n", "export default (val: unknown): val is undefined => val === undefined;\n", "import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n", "import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n", "export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n", "import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n", "import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n", "import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n", "import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n", "export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n", "import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n", "import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n", "import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n", "import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) || isFieldArray\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const field = get(fieldsRef.current, name);\n  field._f.value = value;\n  field._f.nest = true;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isFieldArray\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else if (get(fieldsRef.current, name)) {\n        get(fieldsRef.current, name)._f.mount = false;\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n", "import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n", "import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n", "export default (value: string) => /^\\w*$/.test(value);\n", "import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n", "import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n", "import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n", "import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef?: React.MutableRefObject<FieldValues>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        (!_f || !_f.nest) &&\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n", "import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n", "import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n", "import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n", "import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n", "import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n", "import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n", "import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n", "export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n", "import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n", "export default (value: unknown): value is string => typeof value === 'string';\n", "import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n", "import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n", "import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n", "export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n", "export default (value: unknown): value is boolean => typeof value === 'boolean';\n", "import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n", "import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldsRef.current, name)\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field) =>\n      omit((field || {}) as Record<TKeyName, any>, keyName),\n    );\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusDetail = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options\n      ? !isUndefined(options.focusIndex)\n        ? `${name}.${options.focusIndex}`\n        : options.focusName\n        ? options.focusName\n        : !options.shouldFocus\n        ? ''\n        : `${name}.${index}`\n      : `${name}.${index}`;\n\n  const resetFields = <T>(index?: T) =>\n    convertToArrayPayload(index).forEach((currentIndex) =>\n      set(\n        fieldsRef.current,\n        `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`,\n        isUndefined(currentIndex) ? [] : undefined,\n      ),\n    );\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    updatedFieldArrayValues?: T,\n  ) =>\n    updatedFieldArrayValues &&\n    set(\n      formStateRef.current.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        omitKey(updatedFieldArrayValues),\n        get(defaultValuesRef.current, name, []),\n        get(formStateRef.current.dirtyFields, name, []),\n      ),\n    );\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach(\n      (appendValueItem, valueIndex) =>\n        !isPrimitive(appendValueItem) &&\n        Object.entries(appendValueItem).forEach(([key, value]) => {\n          const inputName = `${parentName || name}.${\n            parentName ? valueIndex : index + valueIndex\n          }.${key}`;\n\n          Array.isArray(value)\n            ? registerFieldArray(value, valueIndex, inputName)\n            : set(fieldsRef.current, inputName, {\n                _f: {\n                  ref: {\n                    name: inputName,\n                  },\n                  name: inputName,\n                  value: isPrimitive(value) ? value : { ...value },\n                },\n              });\n        }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name,\n      formValues: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(\n        fieldsRef.current,\n        (key: string) => isString(key) && key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields]),\n    });\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next({ name: inputFieldArrayName, fields, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                fields,\n              )\n            : (fieldArrayDefaultValuesRef.current = fields);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      (shouldUnmount || shouldUnregister) && unregister(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n", "import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n", "import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n", "import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n", "import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n", "import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n", "import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n", "export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n", "type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n", "import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n", "import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  options &&\n  mounted &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n", "export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n", "export default (value: unknown): value is Function =>\n  typeof value === 'function';\n", "import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n", "export default (value: unknown): value is RegExp => value instanceof RegExp;\n", "import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n", "import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n", "import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n", "import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n", "export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n", "import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n", "export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n", "import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldErrors,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  FormStateSubjectRef,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef<FormStateSubjectRef<TFieldValues>>(\n    new Subject(),\n  );\n  const unregisterFieldsNamesRef = React.useRef<Set<InternalFieldName>>(\n    new Set(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      formValues: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const inFieldArrayActionRef = React.useRef(false);\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () => {\n    formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n\n    return formStateRef.current.isValid;\n  };\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        (get(fieldsWithValidationRef.current, name) || resolverRef.current) &&\n          set(validFieldsRef.current, name, true);\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldRender ||\n          isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(state) ||\n          (readFormStateRef.current.isValid &&\n            formStateRef.current.isValid !==\n              (resolverRef.current ? !!isValid : getIsValid()))) &&\n        !isNullOrUndefined(shouldRender)\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(\n          isWatched ? { name } : updatedFormState,\n        );\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            controllerSubjectRef.current.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          options.shouldDirty && updateAndGetDirtyState(name, value);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n          name,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    let isValid = true;\n\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            isValid = false;\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n\n    return isValid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : (convertToArrayPayload(name) as InternalFieldName[]);\n      let isValid;\n      let schemaResult: FieldErrors<TFieldValues> | {} = {};\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        schemaResult = await executeSchemaOrResolverValidation(\n          fields,\n          isUndefined(name) ? undefined : (fields as FieldName<TFieldValues>[]),\n        );\n        isValid = fields.every((name) => !get(schemaResult, name));\n      } else {\n        isValid = isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : (\n              await Promise.all(\n                fields\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeValidation(fieldName, null),\n                  ),\n              )\n            ).every(Boolean);\n      }\n\n      formStateSubjectRef.current.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current\n          ? isEmptyObject(schemaResult)\n          : getIsValid(),\n      });\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options, field._f.mount) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          updateFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, formValues: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              formValues: getValues(),\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(\n              isWatched ? { name } : { ...state, name },\n            )\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            formValues: getValues(),\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && watchFieldsRef.current.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n          formValues: getValues(),\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            nest: true,\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref || {},\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      hasValidation(options, true) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name) as Field;\n                const shouldUnmount =\n                  shouldUnregister || (options && options.shouldUnregister);\n                field && (field._f.mount = false);\n\n                if (\n                  isWeb &&\n                  (isNameInFieldArray(fieldArrayNamesRef.current, name)\n                    ? shouldUnmount && !inFieldArrayActionRef.current\n                    : shouldUnmount)\n                ) {\n                  unregisterFieldsNamesRef.current.add(name);\n                }\n              }\n            },\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } catch {\n        hasNoPromiseError = false;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    value: T,\n    name = '',\n  ): void => {\n    const field = get(fieldsRef.current, name);\n\n    !field &&\n      (isPrimitive(value) ||\n        (isWeb && (value instanceof File || value instanceof Date))) &&\n      set(fieldsRef.current, name, {\n        _f: {\n          ref: { name, value },\n          value,\n          name,\n        },\n      });\n\n    if (field && field._f && field._f.nest) {\n      return;\n    }\n\n    if (Array.isArray(value) || isObject(value)) {\n      if (name && !get(fieldsRef.current, name)) {\n        set(fieldsRef.current, name, Array.isArray(value) ? [] : {});\n      }\n\n      for (const key in value) {\n        registerAbsentFields(value[key], name + (name ? '.' : '') + key);\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        formValues: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      registerAbsentFields({ ...updatedValues });\n\n    resetFromState(keepStateOptions, values);\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    registerAbsentFields(defaultValuesRef.current);\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    isMountedRef.current = true;\n\n    for (const name of unregisterFieldsNamesRef.current) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    unregisterFieldsNamesRef.current = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        inFieldArrayActionRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n", "import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, watchSubjectRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: ({ name: inputName, formValues }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            formValues,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],
  "mappings": "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",
  "names": ["result", "isProxyEnabled", "formState", "value", "getFieldArrayParentName", "fields", "append", "appendAt", "prepend", "prependAt", "insert", "insertAt", "isCheckBox", "fieldsRef", "name", "ref"]
}
