{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/toNestError.ts", "../../@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  InternalFieldName,\n} from 'react-hook-form';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  fields: Record<InternalFieldName, Field['_f']>,\n): FieldErrors<TFieldValues> => {\n  const fieldErrors: FieldErrors<TFieldValues> = {};\n  for (const path in errors) {\n    const field = get(fields, path) as Field['_f'] | undefined;\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n", "import Yup from 'yup';\nimport { toNestError } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return error.inner.reduce<Record<string, FieldError>>((previous, error) => {\n    if (!previous[error.path!]) {\n      previous[error.path!] = { message: error.message, type: error.type! };\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = previous[error.path!].types;\n      const messages = types && types[error.type!];\n\n      previous[error.path!] = appendErrors(\n        error.path!,\n        validateAllFieldCriteria,\n        previous,\n        error.type!,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    return previous;\n  }, {});\n};\n\nexport const yupResolver: Resolver =\n  (\n    schema,\n    schemaOptions = {\n      abortEarly: false,\n    },\n    resolverOptions = {},\n  ) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](values, Object.assign({}, schemaOptions, { context }));\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(e, options.criteriaMode === 'all'),\n          options.fields,\n        ),\n      };\n    }\n  };\n"],
  "mappings": ";;;;;;;;;AASaA,IAAAA,IAAc,SACzBC,IACAC,GAAAA;AAEA,MAAMC,IAAyC,CAAA;AAC/C,WAAWC,KAAQH,IAAQ;AACzB,QAAMI,IAAQC,IAAIJ,GAAQE,CAAAA;AAC1BG,QACEJ,GACAC,GACAI,OAAOC,OAAOR,GAAOG,IAAO,EAAEM,KAAKL,KAASA,EAAMK,IAAAA,CAAAA,CAAAA;EAAAA;AAItD,SAAOP;AAAAA;;;ACdT,IA4BaQ,IACX,SACEC,IACAC,GAGAC,GAAAA;AAAAA,SAAAA,WAHAD,MAAAA,IAAgB,EACdE,YAAAA,MAAY,IAAA,WAEdD,MAAAA,IAAkB,CAAA,IAAA,SAEbE,GAAQC,IAASC,GAAAA;AAAAA,QAAAA;AAAAA,aAAAA,QAAAA,QAAAA,SAAAA,GAAAA,GAAAA;AAAAA,YAAAA;AAAAA,cAAAA,MAEhBL,EAAcI,WAAoC,QAEpDE,QAAQC,KACN,+FAAA,GAAA,QAAA,QAIiBR,GACM,WAAzBE,EAAgBO,OAAkB,iBAAiB,YACnDL,GAAQM,OAAOC,OAAO,CAAA,GAAIV,GAAe,EAAEI,SAAAA,GAAAA,CAAAA,CAAAA,CAAAA,EAAAA,KAAAA,SAFvCO,IAAAA;AAIN,mBAAO,EACLR,QAAQQ,IACRC,QAAQ,CAAA,EAAA;UAAA,CAAA;QAAA,SAAAC,IAAA;AAAA,iBAAA,EAAAA,EAAA;QAAA;AAAA,eAAAC,MAAAA,GAAA,OAAAA,GAAA,KAAA,QAAA,CAAA,IAAAA;MAAA,EAAA,GAAA,SAEHD,IAAAA;AACP,eAAO,EACLV,QAAQ,CAAA,GACRS,QAAQG,GAvDdC,KAwDyBH,IAvDzBI,KAuDqD,UAAzBZ,EAAQa,cArD7BF,GAAMG,MAAMC,OAAmC,SAACC,GAAUL,IAAAA;AAK/D,cAJKK,EAASL,GAAMM,UAClBD,EAASL,GAAMM,QAAS,EAAEC,SAASP,GAAMO,SAASC,MAAMR,GAAMQ,KAAAA,IAG5DP,IAA0B;AAC5B,gBAAMQ,KAAQJ,EAASL,GAAMM,MAAOG,OAC9BC,KAAWD,MAASA,GAAMT,GAAMQ;AAEtCH,cAASL,GAAMM,QAASK,aACtBX,GAAMM,MACNL,IACAI,GACAL,GAAMQ,MACNE,KACK,CAAA,EAAgBE,OAAOF,IAAsBV,GAAMO,OAAAA,IACpDP,GAAMO,OAAAA;UAAAA;AAId,iBAAOF;QAAAA,GACN,CAAA,CAAA,IAiCKhB,EAAQwB,MAAAA,EAAAA;AA1DO,YACvBb,IACAC;MAAAA,CAAAA,CAAAA;IAAAA,SA2BA,GAAA;AAAA,aAAA,QAAA,OAAA,CAAA;IAAA;EAAA;AAAA;",
  "names": ["toNestError", "errors", "fields", "fieldErrors", "path", "field", "get", "set", "Object", "assign", "ref", "yupResolver", "schema", "schemaOptions", "resolverOptions", "abortEarly", "values", "context", "options", "console", "warn", "mode", "Object", "assign", "result", "errors", "e", "c", "toNestError", "error", "validateAllFieldCriteria", "criteriaMode", "inner", "reduce", "previous", "path", "message", "type", "types", "messages", "appendErrors", "concat", "fields"]
}
