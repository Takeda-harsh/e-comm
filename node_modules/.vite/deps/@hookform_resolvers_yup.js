import {
  appendErrors,
  get,
  set
} from "./chunk-SKFYBE37.js";
import "./chunk-O3IA4Q4A.js";
import "./chunk-TWLJ45QX.js";

// node_modules/@hookform/resolvers/dist/resolvers.module.js
var a = function(a2, e) {
  var f = {};
  for (var t in a2) {
    var n = get(e, t);
    set(f, t, Object.assign(a2[t], { ref: n && n.ref }));
  }
  return f;
};

// node_modules/@hookform/resolvers/yup/dist/yup.module.js
var r = function(r2, o, n) {
  return void 0 === o && (o = { abortEarly: false }), void 0 === n && (n = {}), function(s, a2, c) {
    try {
      return Promise.resolve(function(e, t) {
        try {
          var c2 = (o.context && true && console.warn("You should not used the yup options context. Please, use the 'useForm' context object instead"), Promise.resolve(r2["sync" === n.mode ? "validateSync" : "validate"](s, Object.assign({}, o, { context: a2 }))).then(function(e2) {
            return { values: e2, errors: {} };
          }));
        } catch (e2) {
          return t(e2);
        }
        return c2 && c2.then ? c2.then(void 0, t) : c2;
      }(0, function(r3) {
        return { values: {}, errors: a((o2 = r3, n2 = "all" === c.criteriaMode, o2.inner.reduce(function(e, r4) {
          if (e[r4.path] || (e[r4.path] = { message: r4.message, type: r4.type }), n2) {
            var o3 = e[r4.path].types, s2 = o3 && o3[r4.type];
            e[r4.path] = appendErrors(r4.path, n2, e, r4.type, s2 ? [].concat(s2, r4.message) : r4.message);
          }
          return e;
        }, {})), c.fields) };
        var o2, n2;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
};
export {
  r as yupResolver
};
//# sourceMappingURL=@hookform_resolvers_yup.js.map
